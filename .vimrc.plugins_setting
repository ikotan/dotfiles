"------------------------------------------------------------
" pluginの設定ファイル
"------------------------------------------------------------

" ---------- 'scrooloose/nerdcommenter.git' ----------
" コメントの間にスペースを入る
let NERDSpaceDelims = 1
" 未対応ファイルタイプの場合、エラーメッセージを表示しない
let NERDShutUp = 1

" ---------- 'Yggdroot/indentLine' ----------
nnoremap <silent> <space>l :<C-u>IndentLinesToggle<Enter>
" tabに対してもインデントを有効化する
set list listchars=tab:\¦\
" インデントを除外したい場合
let g:indentLine_fileTypeExclude = ['help','nerdtree']

" ---------- 'tpope/vim-surround' ----------
" sコマンドでsurroundをマッピング
nmap s <Plug>Ysurround
" ssコマンドでssurroundをマッピング
nmap ss <Plug>Yssurround

" ---------- 'alpaca-tc/beautify.vim' ----------
let g:beautify#beautifier#npm_beautifier#bin = {
      \ 'javascript' : 'js-beautify',
      \ 'css'        : 'css-beautify',
      \ 'html'       : 'html-beautify'
      \ }
let g:beautify#beautifier#jq#bin = 'jq'
" JavaScriptの整形
nnoremap <silent> <Space>bj :<C-u>Beautify js-beautify<Enter>
" Htmlの整形
nnoremap <silent> <Space>bh :<C-u>Beautify html-beautify<Enter>

" ---------- 'Shougo/neocomplete.vim' ----------
" neocompleteを起動時に有効化"
let g:neocomplete#enable_at_startup               = 1
let g:neocomplete#enable_ignore_case              = 1
" 大文字が入力されるまで大文字小文字を無視
let g:neocomplete#enable_smart_case               = 1
let g:neocomplete#use_vimproc                     = 1
let g:neocomplete#sources#buffer#cache_limit_size = 100000
let g:neocomplete#sources#tags#cache_limit_size   = 300000
let g:neocomplete#enable_fuzzy_completion         = 1
let g:neocomplete#lock_buffer_name_pattern        = '\*ku\*'
" Define dictionary.
" let g:neocomplete#sources#dictionary#dictionaries = {
    " \ 'default' : '',
    " \ 'vimshell' : $HOME.'/.vimshell_hist',
    " \ 'scheme' : $HOME.'/.gosh_completions'
        " \ }
" Define keyword.
if !exists('g:neocomplete#keyword_patterns')
    let g:neocomplete#keyword_patterns = {}
endif
let g:neocomplete#keyword_patterns['default'] = '\h\w*'
" Plugin key-mappings.
inoremap <expr><C-g>     neocomplete#undo_completion()
inoremap <expr><C-l>     neocomplete#complete_common_string()
" Recommended key-mappings.
" <CR>: close popup and save indent.
inoremap <silent> <CR> <C-r>=<SID>my_cr_function()<CR>
function! s:my_cr_function()
  return (pumvisible() ? "\<C-y>" : "" ) . "\<CR>"
  " For no inserting <CR> key.
  "return pumvisible() ? "\<C-y>" : "\<CR>"
endfunction
" TABキーで補完の移動をしたい
inoremap <expr><TAB> pumvisible() ? "\<C-n>" : "<TAB>"
" <C-h>, <BS>: close popup and delete backword char.
inoremap <expr><C-h> neocomplete#smart_close_popup()."\<C-h>"
inoremap <expr><BS> neocomplete#smart_close_popup()."\<C-h>"

if !exists('g:neocomplete#force_omni_input_patterns')
    let g:neocomplete#force_omni_input_patterns = {}
endif

let g:neocomplete#force_omni_input_patterns.cpp = '[^.[:digit:] *\t]\%(\.\|->\)\w*\|\h\w*::\w*'
let g:neocomplete#force_omni_input_patterns.typescript = '[^. \t]\.\%(\h\w*\)\?' 

" ---------- 'thinca/vim-quickrun' ----------
nnoremap <silent> qr :QuickRun -hook/time/enable 1<Enter>
nnoremap <expr><silent> <C-c> quickrun#is_running() ? quickrun#sweep_sessions() : "\<C-c>"
set termencoding=utf-8
let g:quickrun_config = {
      \ "_" : {
      \   "runner" : "vimproc",
      \   "runner/vimproc/updatetime" : 60,
      \   "hook/time/enable" : 1,
      \ }}

" ---------- 'scrooloose/syntastic' ----------
" エラー行をsignで表示する
let g:syntastic_enable_signs = 1
" 可能ならhighligt表示する
let g:syntastic_enable_highlighting = 1
" 自動的に開いたり閉じたりする
let g:syntastic_auto_loc_list=1
" モジュールのパスを指定
let g:syntastic_perl_lib_path = 'lib'
let g:syntastic_mode_map = {
      \ 'mode': 'passive',
      \ 'active_filetypes': ['ruby', 'perl', 'javascript', 'scala', 'typescript'],
      \ 'passive_filetypes': []
      \ }
let g:syntastic_ruby_checkers = ['rubocop']
let g:syntastic_typescript_checkers = ['tsuquyomi']
nnoremap <silent> <Space><C-d> :<C-u>lclose<Enter>


" ---------- 'taglist.vim' ----------
" nmap <silent> tl :TlistToggle<Enter>
" 右側でtaglistのウィンドーを表示
" let Tlist_Use_Right_Window = 1
" taglistのウィンドーが最後のウィンドーならばVimを閉じる
" let Tlist_Exit_OnlyWindow = 1
" 自動表示
" let Tlist_Auto_Open = 1
" 自動更新
" let Tlist_Auto_Update = 1

" ---------- 'majutsushi/tagbar' ----------
nmap <silent> tt :TagbarToggle<Enter>
autocmd VimEnter * nested :call tagbar#autoopen(1)
" ウィンドウのサイズ調整
let g:tagbar_width = 30

let g:tagbar_type_typescript = {
      \ 'ctagstype': 'typescript',
      \ 'kinds': [
        \ 'c:classes',
        \ 'n:modules',
        \ 'f:functions',
        \ 'v:variables',
        \ 'v:varlambdas',
        \ 'm:members',
        \ 'i:interfaces',
        \ 'e:enums',
      \ ] }

let g:tagbar_type_scala = {
      \ 'ctagstype' : 'scala',
      \ 'sro'       : '.',
      \ 'kinds'     : [
        \ 'p:packages',
        \ 'T:types:1',
        \ 't:traits',
        \ 'o:objects',
        \ 'O:case objects',
        \ 'c:classes',
        \ 'C:case classes',
        \ 'm:methods',
        \ 'V:values:1',
        \ 'v:variables:1'
      \ ] }

" ---------- 't9md/vim-quickhl' ----------
nmap <Space>m <Plug>(quickhl-manual-this)
xmap <Space>m <Plug>(quickhl-manual-this)
nmap <Space>n <Plug>(quickhl-manual-reset)
xmap <Space>n <Plug>(quickhl-manual-reset)

" ---------- 'osyo-manga/vim-over' ----------
" 全体置換
nnoremap <silent> <Space>o :OverCommandLine<CR>%s//g<Left><Left>
" 選択範囲置換
vnoremap <silent> <Space>o :OverCommandLine<CR>s//g<Left><Left>
" カーソルしたの単語を置換
nnoremap sub :OverCommandLine<CR>%s/<C-r><C-w>//g<Left><Left>

" ---------- 'scrooloose/nerdtree' ----------
nnoremap <silent> nd :NERDTreeToggle<Enter>

" ---------- 'itchyny/lightline.vim' ----------
" let g:lightline = {
      " \ 'colorscheme': 'wombat',
      " \ 'component': {
      " \   'readonly': '%{&readonly?"\u2b64":""}',
      " \ },
      " \ 'separator': { 'left': "\u2b80", 'right': "\u2b82" },
      " \ 'subseparator': { 'left': "\u2b81", 'right': "\u2b83" },
      " \ }

" ---------- 'kien/ctrlp.vim' ----------
let g:ctrlp_map = '<c-p>'
let g:ctrlp_cmd = 'CtrlP'
let g:ctrlp_use_migemo = 1
" 終了時キャッシュをクリアしない
let g:ctrlp_clear_cache_on_exit = 0
" MRUの最大記録数
let g:ctrlp_mruf_max = 1000
let g:ctrlp_working_path_mode = 'ra'
let g:ctrlp_prompt_mappings = {
      \ 'AcceptSelection("t")': ['<c-a>'],
      \ }
" vimで開いたディレクトリから検索
nnoremap <silent> <space><C-p> :<C-u>CtrlP '~/'<Enter>

" ---------- 'vim-scripts/vcscommand.vim' ----------
nnoremap <silent> vd :<C-u>VCSDiff<CR>
nnoremap <silent> vdv :<C-u>VCSVimDiff<CR>
nnoremap vdl :<C-u>VCSDiff<Space>
nnoremap <silent> vl :<C-u>VCSLog<CR>
nnoremap <silent> vs :<C-u>VCSStatus<CR>

" ---------- 'tpope/vim-fugitive' ----------
nnoremap <Space>gd :<C-u>Gdiff<Enter>
nnoremap <Space>gs :<C-u>Gstatus<Enter>
nnoremap <Space>gl :<C-u>Glog<Enter>
nnoremap <Space>ga :<C-u>Gwrite<Enter>
nnoremap <Space>gc :<C-u>Gcommit<Enter>
nnoremap <Space>gC :<C-u>Git commit --amend<Enter>
nnoremap <Space>gb :<C-u>Gblame<Enter>

" ---------- 'airblade/vim-gitgutter' ----------
" gitの差分
nnoremap <silent> <space>g :<C-u>GitGutterToggle<CR>
nnoremap <silent> <space>h :<C-u>GitGutterLineHighlightsToggle<CR>
" 遅延呼び出し
let s:bundle = neobundle#get('vim-gitgutter')
function! s:bundle.hooks.on_source(bundle)
    let g:gitgutter_enabled         = 0
    let g:gitgutter_highlight_lines = 0
endfunction
unlet s:bundle

" ---------- 'Shougo/unite.vim' ----------
" The prefix key.
nnoremap    [unite]   <Nop>
nmap    f [unite]
nnoremap [unite]u  :<C-u>Unite <Space>
" 全部乗せ
nnoremap <silent> [unite]a  :<C-u>UniteWithCurrentDir -buffer-name=files buffer file_mru bookmark file<CR>
" ファイル一覧
nnoremap <silent> [unite]f  :<C-u>Unite -buffer-name=files file<CR>
" ファイル検索
nnoremap <silent> [unite]p  :<C-u>Unite -buffer-name=files file_rec/async:!<cr>
" バッファ一覧
nnoremap <silent> [unite]b  :<C-u>Unite buffer<CR>
" 常用セット
nnoremap <silent> [unite]u  :<C-u>Unite buffer file_mru<CR>
" 最近使用したファイル一覧
nnoremap <silent> [unite]m  :<C-u>Unite file_mru<CR>
" 現在のバッファのカレントディレクトリからファイル一覧
nnoremap <silent> [unite]d  :<C-u>UniteWithBufferDir -buffer-name=files file<CR>
" snippet一覧
nnoremap <silent> [unite]s  :<C-u>Unite snippet<CR>
" color一覧
nnoremap <silent> [unite]c  :<C-u>Unite colorscheme -auto-preview<CR>
" yank履歴一覧
nnoremap <silent> [unite]y  :<C-u>Unite yankround<CR>
" 宣言一覧
nnoremap <silent> [unite]o  :<C-u>Unite outline<CR>
" nnoremap <silent> [unite]b  :<C-u>UniteWithBufferDir -buffer-name=files buffer file_mru bookmark file<CR>
" ウィンドウを分割して開く
au Filetype unite nnoremap <silent> <buffer> <expr> <C-j> unite#do_action('splist')
au Filetype unite inoremap <silent> <buffer> <expr> <C-l> unite#do_action('split')
" ウィンドウを縦に分割して開く
au Filetype unite nnoremap <silent> <buffer> <expr> <C-v> unite#do_action('vsplit')
au Filetype unite inoremap <silent> <buffer> <expr> <C-v> unite#do_action('vsplit')
" ESCキーを2回押すと終了する
au FileType unite nnoremap <silent> <buffer> <ESC><ESC> :q<CR>
au FileType unite inoremap <silent> <buffer> <ESC><ESC> <ESC>:q<CR>
" unite-plugins
cnoremap UH Unite help<Enter>
cnoremap UO Unite outline<Enter>
" 設定
let g:unite_enable_start_insert = 1
let g:unite_cursor_line_highlight = 'CursorLine'
let g:unite_source_file_mru_filename_format = ':~:.'
let g:unite_source_file_mru_limit = 5000
let g:unite_source_directory_mru_limit = 300
let g:unite_source_rec_min_cache_files = 50
let g:unite_source_rec_max_cache_files = 1000

" ---------- 'leafgarland/typescript-vim' ----------
autocmd BufRead,BufNewFile *.ts set filetype=typescript

" ---------- 'Quramy/tsuquyomi' ----------
" autocmd FileType typescript setlocal completeopt-=menu
" autocmd FileType typescript setlocal completeopt+=menu,preview
let g:tsuquyomi_completion_detail = 1
let g:tsuquyomi_disable_quickfix = 1
